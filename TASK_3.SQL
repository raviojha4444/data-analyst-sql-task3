CREATE DATABASE OLIST;
USE OLIST;

CREATE TABLE ORDERS(
ORDER_ID INT NOT NULL,
ORDER_DATE DATE NOT NULL,
ORDER_TIME TIME NOT NULL,
PRIMARY KEY (ORDER_ID));

CREATE TABLE ORDER_DETAILS(
ORDER_DETAILS_ID INT NOT NULL,
ORDER_ID INT NOT NULL,
PIZZA_ID TEXT NOT NULL,
QUANTITY INT NOT NULL,
PRIMARY KEY (ORDER_DETAILS_ID));

-- 1) RETRIEVE THE TOTAL NUMBER OF ORDER PLACES
SELECT COUNT(ORDER_ID) FROM ORDERS;

-- 2) CALCULATE THE TOTAL REVENUE GENERATED FROM PIZZA SALES
SELECT sum(ORDER_DETAILS.QUANTITY*PIZZAS.PRICE) AS TOTAL_REVENUE
FROM ORDER_DETAILS 
JOIN PIZZAS
ON ORDER_DETAILS.PIZZA_ID=PIZZAS.PIZZA_ID;

-- 3) IDENTIFY HIGH PRICE PIZZA.
SELECT  PIZZA_TYPES.NAME,PIZZAS.PRICE
FROM PIZZA_TYPES
JOIN PIZZAS
ON PIZZA_TYPES.PIZZA_TYPE_ID=PIZZAS.PIZZA_TYPE_ID
ORDER BY PRICE DESC LIMIT 1;

-- 4) IDENTIFY THE MOST COMMON PIZZA SIZE ORDERED
select PIZZAS.SIZE,COUNT(ORDER_DETAILS.ORDER_ID) FROM PIZZAS
JOIN ORDER_DETAILS
ON ORDER_DETAILS.PIZZA_ID=PIZZAS.PIZZA_ID
group by PIZZAS.SIZE;

-- 5) List the top 5 most orderd pizza types along with their quantities.
SELECT PIZZA_TYPES.name, SUM(ORDER_DETAILS.quantity) AS total_quantity
FROM PIZZA_TYPES
JOIN PIZZAS ON PIZZA_TYPES.pizza_type_id = PIZZAS.pizza_type_id
JOIN ORDER_DETAILS ON ORDER_DETAILS.pizza_id = PIZZAS.pizza_id
GROUP BY PIZZA_TYPES.name
ORDER BY total_quantity desc
LIMIT 5;

-- 6) JOIN THE NECESSARY TABLE TO FIND THE TOTAL QUANTITY OF EACH PIZZA ORDERD.
SELECT PIZZA_TYPES.CATEGORY,SUM(ORDER_DETAILS.QUANTITY) AS QUANTITY
FROM PIZZA_TYPES JOIN PIZZAS
ON PIZZA_TYPES.PIZZA_TYPE_ID=PIZZAS.PIZZA_TYPE_ID
JOIN ORDER_DETAILS
ON  ORDER_DETAILS.PIZZA_ID=PIZZAS.PIZZA_ID
GROUP BY PIZZA_TYPES.CATEGORY ORDER BY QUANTITY DESC;


-- 7) DETERMINE THE DISTRIBUTION OF ORDERS BY HOUR OF THE DAY.
SELECT HOUR(ORDER_TIME),COUNT(ORDER_ID) FROM ORDERS
group by HOUR(ORDER_TIME);

-- 8) JOIN RELEVENT TABLES TO FIND THE CATEGORY-WISE DISTRIBUTION OF PIZZAS.
SELECT CATEGORY,COUNT(NAME) FROM PIZZA_TYPES
GROUP BY CATEGORY;

-- 9) GROUP THE ORDERS BY DATE AND CALCULATE THE AVERAGE NUMBER OF PIZZAS ORDERD PER DAY.

SELECT ROUND(AVG(daily_quantity), 0) AS avg_quantity_per_day
FROM (
    SELECT ORDERS.order_date,
           SUM(ORDER_DETAILS.quantity) AS daily_quantity
    FROM ORDERS
    JOIN ORDER_DETAILS ON ORDERS.order_id = ORDER_DETAILS.order_id
    GROUP BY ORDERS.order_date
) AS ORDER_QUANTITY;

-- 10) DETERMINE THE TOP 3 MOST ORDERD PIZZA TYPES BASED ON REVENUE.
SELECT PIZZA_TYPES.name,
       SUM(ORDER_DETAILS.quantity * PIZZAS.price) AS total_revenue
FROM PIZZA_TYPES
JOIN PIZZAS ON PIZZA_TYPES.pizza_type_id = PIZZAS.pizza_type_id
JOIN ORDER_DETAILS ON ORDER_DETAILS.pizza_id = PIZZAS.pizza_id
GROUP BY PIZZA_TYPES.name
ORDER BY total_revenue DESC
LIMIT 3;

-- 11) CALCULATE THE PERCENTAGE CONTRIBUTION OF EACH PIZZA TYPES TO THE TOTAL REVENUE.
SELECT 
    PIZZA_TYPES.name,
    ROUND(SUM(ORDER_DETAILS.quantity * PIZZAS.price), 2) AS revenue,
    ROUND(
        (SUM(ORDER_DETAILS.quantity * PIZZAS.price) * 100) / 
        (SELECT SUM(ORDER_DETAILS.quantity * PIZZAS.price)
         FROM PIZZAS
         JOIN ORDER_DETAILS ON ORDER_DETAILS.pizza_id = PIZZAS.pizza_id), 2
    ) AS percentage_contribution
FROM PIZZA_TYPES
JOIN PIZZAS ON PIZZA_TYPES.pizza_type_id = PIZZAS.pizza_type_id
JOIN ORDER_DETAILS ON ORDER_DETAILS.pizza_id = PIZZAS.pizza_id
GROUP BY PIZZA_TYPES.name
ORDER BY percentage_contribution DESC;

-- 12) ANALYZE THE CUMULATIVE REVENUE GENERATED OVER TIME
SELECT 
    ORDERS.order_date,
    ROUND(SUM(ORDER_DETAILS.quantity * PIZZAS.price), 2) AS daily_revenue,
    ROUND(SUM(SUM(ORDER_DETAILS.quantity * PIZZAS.price)) OVER (ORDER BY ORDERS.order_date), 2) AS cumulative_revenue
FROM ORDERS
JOIN ORDER_DETAILS ON ORDERS.order_id = ORDER_DETAILS.order_id
JOIN PIZZAS ON ORDER_DETAILS.pizza_id = PIZZAS.pizza_id
GROUP BY ORDERS.order_date
ORDER BY ORDERS.order_date;

-- 13) DETERMINE THE TOP 3 MOST ORDERD PIZZA TYPES BASED ON REVENUE FOR EACH PIZZA CATEGORY.

SELECT category, pizza_type, revenue
FROM (
    SELECT 
        PIZZA_TYPES.category,
        PIZZA_TYPES.name AS pizza_type,
        SUM(ORDER_DETAILS.quantity * PIZZAS.price) AS revenue,
        ROW_NUMBER() OVER (
            PARTITION BY PIZZA_TYPES.category
            ORDER BY SUM(ORDER_DETAILS.quantity * PIZZAS.price) DESC
        ) AS rn
    FROM PIZZA_TYPES
    JOIN PIZZAS ON PIZZA_TYPES.pizza_type_id = PIZZAS.pizza_type_id
    JOIN ORDER_DETAILS ON ORDER_DETAILS.pizza_id = PIZZAS.pizza_id
    GROUP BY PIZZA_TYPES.category, PIZZA_TYPES.name
) AS ranked
WHERE rn <= 3;

-- 14) Create a view that shows each pizza type with total quantity and total revenue.
CREATE OR REPLACE VIEW pizza_summary_view AS
SELECT 
    PIZZA_TYPES.name AS pizza_name,
    SUM(ORDER_DETAILS.quantity) AS total_quantity,
    ROUND(SUM(ORDER_DETAILS.quantity * PIZZAS.price), 2) AS total_revenue
FROM PIZZA_TYPES
JOIN PIZZAS ON PIZZA_TYPES.pizza_type_id = PIZZAS.pizza_type_id
JOIN ORDER_DETAILS ON ORDER_DETAILS.pizza_id = PIZZAS.pizza_id
GROUP BY PIZZA_TYPES.name;

SELECT * FROM pizza_summary_view;

-- 15) Add indexes to optimize queries involving pizza_id and order_id.
CREATE INDEX idx_pizza_id ON ORDER_DETAILS(pizza_id);
SHOW INDEXES FROM ORDER_DETAILS;
























